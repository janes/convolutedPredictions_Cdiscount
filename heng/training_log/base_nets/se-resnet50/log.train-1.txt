
--- [START 2017-10-11 20:49:40] ----------------------------------------------------------------

** some experiment setting **
	SEED         = 1507726180
	PROJECT_PATH = /home/ck/project/build/dummy-00
	out_dir      = /home/ck/project/results/excited-resnet50-180-00a

** net setting **
<class 'net.model.cdiscount.excited_resnet50.SEResNet50'>


SEResNet50 (
  (layer0): Sequential (
    (0): ConvBn2d (
      (conv): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
      (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
    )
    (1): ReLU (inplace)
    (2): MaxPool2d (size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=(1, 1))
  )
  (layer1): Sequential (
    (0): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(256, 16, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(16, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (downsample): ConvBn2d (
        (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
    )
    (1): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(256, 16, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(16, 256, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (2): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(256, 16, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(16, 256, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (layer2): Sequential (
    (0): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(512, 32, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(32, 512, kernel_size=(1, 1), stride=(1, 1))
      )
      (downsample): ConvBn2d (
        (conv): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
    )
    (1): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(512, 32, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(32, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (2): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(512, 32, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(32, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (3): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(512, 32, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(32, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (layer3): Sequential (
    (0): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
      (downsample): ConvBn2d (
        (conv): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
    )
    (1): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (2): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (3): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (4): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (5): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (layer4): Sequential (
    (0): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(2048, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(2048, 128, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(128, 2048, kernel_size=(1, 1), stride=(1, 1))
      )
      (downsample): ConvBn2d (
        (conv): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (bn): BatchNorm2d(2048, eps=0.0001, momentum=0.1, affine=True)
      )
    )
    (1): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(2048, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(2048, 128, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(128, 2048, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (2): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(2048, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(2048, 128, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(128, 2048, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (fc): Linear (2048 -> 5270)
)
    def __init__(self, in_shape=(3,128,128), num_classes=5000 ):

        super(SEResNet50, self).__init__()
        in_channels, height, width = in_shape

        self.layer0 = nn.Sequential(
            ConvBn2d(in_channels, 64, kernel_size=7, stride=2, padding=3),
            nn.ReLU(inplace=True),
            nn.MaxPool2d(kernel_size=3, stride=2, padding=1),
            #nn.MaxPool2d(kernel_size=2, stride=2, padding=0),
        )
        self.layer1 = make_layer(SEBottleneck,   64,  64, 4, 16, num_blocks=3, stride=1)  #out =  64*4 =  256
        self.layer2 = make_layer(SEBottleneck,  256, 128, 4, 32, num_blocks=4, stride=2)  #out = 128*4 =  512
        self.layer3 = make_layer(SEBottleneck,  512, 256, 4, 64, num_blocks=6, stride=2)  #out = 256*4 = 1024
        self.layer4 = make_layer(SEBottleneck, 1024, 512, 4,128, num_blocks=3, stride=2)  #out = 512*4 = 2048
        self.fc  = nn.Linear(2048, num_classes)


        for m in self.modules():
            if isinstance(m, nn.Conv2d):
                n = m.kernel_size[0] * m.kernel_size[1] * m.out_channels
                m.weight.data.normal_(0, math.sqrt(2. / n))
            elif isinstance(m, nn.BatchNorm2d):
                m.weight.data.fill_(1)
                m.bias.data.zero_()

    def forward(self, x):
        x = self.layer0(x)
        x = self.layer1(x)
        x = self.layer2(x)
        x = self.layer3(x)
        x = self.layer4(x)

        x = F.adaptive_avg_pool2d(x, output_size=1)
        x = x.view(x.size(0), -1)
        x = self.fc (x)
        return x #logits


** dataset setting **
	train_dataset.split = train_id_v0_7019896
	valid_dataset.split = valid_id_v0_5000
	len(train_dataset)  = 12283645
	len(valid_dataset)  = 8785
	len(train_loader)   = 95965
	len(valid_loadernum_iters)   = 69
	batch_size  = 128
	iter_accum  = 4
	batch_size*iter_accum  = 512

def train_augment(image): 
    if random.random() < 0.5:
        image = random_shift_scale_rotate(image,
                #shift_limit  = [0, 0],
                shift_limit  = [-0.06,  0.06],
                scale_limit  = [0.9, 1.2],
                rotate_limit = [-10,10],
                aspect_limit = [1,1],
                #size=[1,299],
        borderMode=cv2.BORDER_REFLECT_101 , u=1)
    else:
        pass

    # flip  random ---------
    image = random_horizontal_flip(image, u=0.5)

    tensor = image_to_tensor_transform(image)
    return tensor

def valid_augment(image): 
    tensor = image_to_tensor_transform(image)
    return tensor



--- [START 2017-10-11 20:51:54] ----------------------------------------------------------------

** some experiment setting **
	SEED         = 1507726314
	PROJECT_PATH = /home/ck/project/build/dummy-00
	out_dir      = /home/ck/project/results/excited-resnet50-180-00a

** net setting **
<class 'net.model.cdiscount.excited_resnet50.SEResNet50'>


SEResNet50 (
  (layer0): Sequential (
    (0): ConvBn2d (
      (conv): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
      (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
    )
    (1): ReLU (inplace)
    (2): MaxPool2d (size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=(1, 1))
  )
  (layer1): Sequential (
    (0): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(256, 16, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(16, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (downsample): ConvBn2d (
        (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
    )
    (1): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(256, 16, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(16, 256, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (2): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(256, 16, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(16, 256, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (layer2): Sequential (
    (0): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(512, 32, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(32, 512, kernel_size=(1, 1), stride=(1, 1))
      )
      (downsample): ConvBn2d (
        (conv): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
    )
    (1): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(512, 32, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(32, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (2): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(512, 32, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(32, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (3): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(512, 32, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(32, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (layer3): Sequential (
    (0): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
      (downsample): ConvBn2d (
        (conv): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
    )
    (1): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (2): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (3): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (4): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (5): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (layer4): Sequential (
    (0): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(2048, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(2048, 128, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(128, 2048, kernel_size=(1, 1), stride=(1, 1))
      )
      (downsample): ConvBn2d (
        (conv): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (bn): BatchNorm2d(2048, eps=0.0001, momentum=0.1, affine=True)
      )
    )
    (1): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(2048, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(2048, 128, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(128, 2048, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (2): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(2048, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(2048, 128, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(128, 2048, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (fc): Linear (2048 -> 5270)
)
    def __init__(self, in_shape=(3,128,128), num_classes=5000 ):

        super(SEResNet50, self).__init__()
        in_channels, height, width = in_shape

        self.layer0 = nn.Sequential(
            ConvBn2d(in_channels, 64, kernel_size=7, stride=2, padding=3),
            nn.ReLU(inplace=True),
            nn.MaxPool2d(kernel_size=3, stride=2, padding=1),
            #nn.MaxPool2d(kernel_size=2, stride=2, padding=0),
        )
        self.layer1 = make_layer(SEBottleneck,   64,  64, 4, 16, num_blocks=3, stride=1)  #out =  64*4 =  256
        self.layer2 = make_layer(SEBottleneck,  256, 128, 4, 32, num_blocks=4, stride=2)  #out = 128*4 =  512
        self.layer3 = make_layer(SEBottleneck,  512, 256, 4, 64, num_blocks=6, stride=2)  #out = 256*4 = 1024
        self.layer4 = make_layer(SEBottleneck, 1024, 512, 4,128, num_blocks=3, stride=2)  #out = 512*4 = 2048
        self.fc  = nn.Linear(2048, num_classes)


        for m in self.modules():
            if isinstance(m, nn.Conv2d):
                n = m.kernel_size[0] * m.kernel_size[1] * m.out_channels
                m.weight.data.normal_(0, math.sqrt(2. / n))
            elif isinstance(m, nn.BatchNorm2d):
                m.weight.data.fill_(1)
                m.bias.data.zero_()

    def forward(self, x):
        x = self.layer0(x)
        x = self.layer1(x)
        x = self.layer2(x)
        x = self.layer3(x)
        x = self.layer4(x)

        x = F.adaptive_avg_pool2d(x, output_size=1)
        x = x.view(x.size(0), -1)
        x = self.fc (x)
        return x #logits


** dataset setting **
	train_dataset.split = train_id_v0_7019896
	valid_dataset.split = valid_id_v0_5000
	len(train_dataset)  = 12283645
	len(valid_dataset)  = 8785
	len(train_loader)   = 95965
	len(valid_loadernum_iters)   = 69
	batch_size  = 128
	iter_accum  = 4
	batch_size*iter_accum  = 512

def train_augment(image): 
    if random.random() < 0.5:
        image = random_shift_scale_rotate(image,
                #shift_limit  = [0, 0],
                shift_limit  = [-0.06,  0.06],
                scale_limit  = [0.9, 1.2],
                rotate_limit = [-10,10],
                aspect_limit = [1,1],
                #size=[1,299],
        borderMode=cv2.BORDER_REFLECT_101 , u=1)
    else:
        pass

    # flip  random ---------
    image = random_horizontal_flip(image, u=0.5)

    tensor = image_to_tensor_transform(image)
    return tensor

def valid_augment(image): 
    tensor = image_to_tensor_transform(image)
    return tensor


** start training here! **
 optimizer=<torch.optim.sgd.SGD object at 0x7ff40a19ce80>
 LR=Step Learning Rates
rates=[' 0.0100']
steps=['      0']

   rate   iter   epoch  | valid_loss/acc | train_loss/acc | batch_loss/acc |  time   
-------------------------------------------------------------------------------------
0.0000   33.0 k   1.38  | 1.5468  0.6691 | 0.0000  0.0000 | 0.0000  0.0000 |     0 min 
0.0100   34.0 k   1.42  | 1.5358  0.6721 | 1.4671  0.6719 | 1.3732  0.6875 |    46 min 
0.0100   35.0 k   1.46  | 1.5346  0.6697 | 1.4361  0.6790 | 1.7756  0.6172 |    92 min 

--- [START 2017-10-11 22:38:01] ----------------------------------------------------------------

** some experiment setting **
	SEED         = 1507732681
	PROJECT_PATH = /home/ck/project/build/dummy-00
	out_dir      = /home/ck/project/results/excited-resnet50-180-00a

** net setting **
<class 'net.model.cdiscount.excited_resnet50.SEResNet50'>


SEResNet50 (
  (layer0): Sequential (
    (0): ConvBn2d (
      (conv): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
      (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
    )
    (1): ReLU (inplace)
    (2): MaxPool2d (size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=(1, 1))
  )
  (layer1): Sequential (
    (0): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(256, 16, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(16, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (downsample): ConvBn2d (
        (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
    )
    (1): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(256, 16, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(16, 256, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (2): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(256, 16, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(16, 256, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (layer2): Sequential (
    (0): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(512, 32, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(32, 512, kernel_size=(1, 1), stride=(1, 1))
      )
      (downsample): ConvBn2d (
        (conv): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
    )
    (1): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(512, 32, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(32, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (2): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(512, 32, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(32, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (3): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(512, 32, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(32, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (layer3): Sequential (
    (0): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
      (downsample): ConvBn2d (
        (conv): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
    )
    (1): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (2): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (3): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (4): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (5): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (layer4): Sequential (
    (0): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(2048, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(2048, 128, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(128, 2048, kernel_size=(1, 1), stride=(1, 1))
      )
      (downsample): ConvBn2d (
        (conv): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (bn): BatchNorm2d(2048, eps=0.0001, momentum=0.1, affine=True)
      )
    )
    (1): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(2048, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(2048, 128, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(128, 2048, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (2): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(2048, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(2048, 128, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(128, 2048, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (fc): Linear (2048 -> 5270)
)
    def __init__(self, in_shape=(3,128,128), num_classes=5000 ):

        super(SEResNet50, self).__init__()
        in_channels, height, width = in_shape

        self.layer0 = nn.Sequential(
            ConvBn2d(in_channels, 64, kernel_size=7, stride=2, padding=3),
            nn.ReLU(inplace=True),
            nn.MaxPool2d(kernel_size=3, stride=2, padding=1),
            #nn.MaxPool2d(kernel_size=2, stride=2, padding=0),
        )
        self.layer1 = make_layer(SEBottleneck,   64,  64, 4, 16, num_blocks=3, stride=1)  #out =  64*4 =  256
        self.layer2 = make_layer(SEBottleneck,  256, 128, 4, 32, num_blocks=4, stride=2)  #out = 128*4 =  512
        self.layer3 = make_layer(SEBottleneck,  512, 256, 4, 64, num_blocks=6, stride=2)  #out = 256*4 = 1024
        self.layer4 = make_layer(SEBottleneck, 1024, 512, 4,128, num_blocks=3, stride=2)  #out = 512*4 = 2048
        self.fc  = nn.Linear(2048, num_classes)


        for m in self.modules():
            if isinstance(m, nn.Conv2d):
                n = m.kernel_size[0] * m.kernel_size[1] * m.out_channels
                m.weight.data.normal_(0, math.sqrt(2. / n))
            elif isinstance(m, nn.BatchNorm2d):
                m.weight.data.fill_(1)
                m.bias.data.zero_()

    def forward(self, x):
        x = self.layer0(x)
        x = self.layer1(x)
        x = self.layer2(x)
        x = self.layer3(x)
        x = self.layer4(x)

        x = F.adaptive_avg_pool2d(x, output_size=1)
        x = x.view(x.size(0), -1)
        x = self.fc (x)
        return x #logits


** dataset setting **
	train_dataset.split = train_id_v0_7019896
	valid_dataset.split = valid_id_v0_5000
	len(train_dataset)  = 12283645
	len(valid_dataset)  = 8785
	len(train_loader)   = 95965
	len(valid_loadernum_iters)   = 69
	batch_size  = 128
	iter_accum  = 4
	batch_size*iter_accum  = 512

def train_augment(image): 
    if random.random() < 0.5:
        image = random_shift_scale_rotate(image,
                #shift_limit  = [0, 0],
                shift_limit  = [-0.06,  0.06],
                scale_limit  = [0.9, 1.2],
                rotate_limit = [-10,10],
                aspect_limit = [1,1],
                #size=[1,299],
        borderMode=cv2.BORDER_REFLECT_101 , u=1)
    else:
        pass

    # flip  random ---------
    image = random_horizontal_flip(image, u=0.5)

    tensor = image_to_tensor_transform(image)
    return tensor

def valid_augment(image): 
    tensor = image_to_tensor_transform(image)
    return tensor


	initial_checkpoint = /home/ck/project/results/excited-resnet50-180-00/checkpoint/00035000_model.pth

--- [START 2017-10-11 22:40:42] ----------------------------------------------------------------

** some experiment setting **
	SEED         = 1507732842
	PROJECT_PATH = /home/ck/project/build/dummy-00
	out_dir      = /home/ck/project/results/excited-resnet50-180-00a

** net setting **
<class 'net.model.cdiscount.excited_resnet50.SEResNet50'>


SEResNet50 (
  (layer0): Sequential (
    (0): ConvBn2d (
      (conv): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
      (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
    )
    (1): ReLU (inplace)
    (2): MaxPool2d (size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=(1, 1))
  )
  (layer1): Sequential (
    (0): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(256, 16, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(16, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (downsample): ConvBn2d (
        (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
    )
    (1): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(256, 16, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(16, 256, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (2): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(256, 16, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(16, 256, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (layer2): Sequential (
    (0): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(512, 32, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(32, 512, kernel_size=(1, 1), stride=(1, 1))
      )
      (downsample): ConvBn2d (
        (conv): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
    )
    (1): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(512, 32, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(32, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (2): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(512, 32, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(32, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (3): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(512, 32, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(32, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (layer3): Sequential (
    (0): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
      (downsample): ConvBn2d (
        (conv): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
    )
    (1): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (2): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (3): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (4): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (5): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (layer4): Sequential (
    (0): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(2048, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(2048, 128, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(128, 2048, kernel_size=(1, 1), stride=(1, 1))
      )
      (downsample): ConvBn2d (
        (conv): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (bn): BatchNorm2d(2048, eps=0.0001, momentum=0.1, affine=True)
      )
    )
    (1): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(2048, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(2048, 128, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(128, 2048, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (2): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(2048, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(2048, 128, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(128, 2048, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (fc): Linear (2048 -> 5270)
)
    def __init__(self, in_shape=(3,128,128), num_classes=5000 ):

        super(SEResNet50, self).__init__()
        in_channels, height, width = in_shape

        self.layer0 = nn.Sequential(
            ConvBn2d(in_channels, 64, kernel_size=7, stride=2, padding=3),
            nn.ReLU(inplace=True),
            nn.MaxPool2d(kernel_size=3, stride=2, padding=1),
            #nn.MaxPool2d(kernel_size=2, stride=2, padding=0),
        )
        self.layer1 = make_layer(SEBottleneck,   64,  64, 4, 16, num_blocks=3, stride=1)  #out =  64*4 =  256
        self.layer2 = make_layer(SEBottleneck,  256, 128, 4, 32, num_blocks=4, stride=2)  #out = 128*4 =  512
        self.layer3 = make_layer(SEBottleneck,  512, 256, 4, 64, num_blocks=6, stride=2)  #out = 256*4 = 1024
        self.layer4 = make_layer(SEBottleneck, 1024, 512, 4,128, num_blocks=3, stride=2)  #out = 512*4 = 2048
        self.fc  = nn.Linear(2048, num_classes)


        for m in self.modules():
            if isinstance(m, nn.Conv2d):
                n = m.kernel_size[0] * m.kernel_size[1] * m.out_channels
                m.weight.data.normal_(0, math.sqrt(2. / n))
            elif isinstance(m, nn.BatchNorm2d):
                m.weight.data.fill_(1)
                m.bias.data.zero_()

    def forward(self, x):
        x = self.layer0(x)
        x = self.layer1(x)
        x = self.layer2(x)
        x = self.layer3(x)
        x = self.layer4(x)

        x = F.adaptive_avg_pool2d(x, output_size=1)
        x = x.view(x.size(0), -1)
        x = self.fc (x)
        return x #logits


** dataset setting **
	train_dataset.split = train_id_v0_7019896
	valid_dataset.split = valid_id_v0_5000
	len(train_dataset)  = 12283645
	len(valid_dataset)  = 8785
	len(train_loader)   = 95965
	len(valid_loadernum_iters)   = 69
	batch_size  = 128
	iter_accum  = 4
	batch_size*iter_accum  = 512

def train_augment(image): 
    if random.random() < 0.5:
        image = random_shift_scale_rotate(image,
                #shift_limit  = [0, 0],
                shift_limit  = [-0.06,  0.06],
                scale_limit  = [0.9, 1.2],
                rotate_limit = [-10,10],
                aspect_limit = [1,1],
                #size=[1,299],
        borderMode=cv2.BORDER_REFLECT_101 , u=1)
    else:
        pass

    # flip  random ---------
    image = random_horizontal_flip(image, u=0.5)

    tensor = image_to_tensor_transform(image)
    return tensor

def valid_augment(image): 
    tensor = image_to_tensor_transform(image)
    return tensor


	initial_checkpoint = /home/ck/project/results/excited-resnet50-180-00a/checkpoint/00035000_model.pth
** start training here! **
 optimizer=<torch.optim.sgd.SGD object at 0x7fcc89013748>

--- [START 2017-10-11 22:43:08] ----------------------------------------------------------------

** some experiment setting **
	SEED         = 1507732988
	PROJECT_PATH = /home/ck/project/build/dummy-00
	out_dir      = /home/ck/project/results/excited-resnet50-180-00a

** net setting **
<class 'net.model.cdiscount.excited_resnet50.SEResNet50'>


SEResNet50 (
  (layer0): Sequential (
    (0): ConvBn2d (
      (conv): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
      (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
    )
    (1): ReLU (inplace)
    (2): MaxPool2d (size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=(1, 1))
  )
  (layer1): Sequential (
    (0): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(256, 16, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(16, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (downsample): ConvBn2d (
        (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
    )
    (1): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(256, 16, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(16, 256, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (2): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(256, 16, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(16, 256, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (layer2): Sequential (
    (0): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(512, 32, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(32, 512, kernel_size=(1, 1), stride=(1, 1))
      )
      (downsample): ConvBn2d (
        (conv): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
    )
    (1): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(512, 32, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(32, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (2): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(512, 32, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(32, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (3): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(512, 32, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(32, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (layer3): Sequential (
    (0): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
      (downsample): ConvBn2d (
        (conv): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
    )
    (1): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (2): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (3): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (4): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (5): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (layer4): Sequential (
    (0): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(2048, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(2048, 128, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(128, 2048, kernel_size=(1, 1), stride=(1, 1))
      )
      (downsample): ConvBn2d (
        (conv): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (bn): BatchNorm2d(2048, eps=0.0001, momentum=0.1, affine=True)
      )
    )
    (1): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(2048, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(2048, 128, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(128, 2048, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (2): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(2048, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(2048, 128, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(128, 2048, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (fc): Linear (2048 -> 5270)
)
    def __init__(self, in_shape=(3,128,128), num_classes=5000 ):

        super(SEResNet50, self).__init__()
        in_channels, height, width = in_shape

        self.layer0 = nn.Sequential(
            ConvBn2d(in_channels, 64, kernel_size=7, stride=2, padding=3),
            nn.ReLU(inplace=True),
            nn.MaxPool2d(kernel_size=3, stride=2, padding=1),
            #nn.MaxPool2d(kernel_size=2, stride=2, padding=0),
        )
        self.layer1 = make_layer(SEBottleneck,   64,  64, 4, 16, num_blocks=3, stride=1)  #out =  64*4 =  256
        self.layer2 = make_layer(SEBottleneck,  256, 128, 4, 32, num_blocks=4, stride=2)  #out = 128*4 =  512
        self.layer3 = make_layer(SEBottleneck,  512, 256, 4, 64, num_blocks=6, stride=2)  #out = 256*4 = 1024
        self.layer4 = make_layer(SEBottleneck, 1024, 512, 4,128, num_blocks=3, stride=2)  #out = 512*4 = 2048
        self.fc  = nn.Linear(2048, num_classes)


        for m in self.modules():
            if isinstance(m, nn.Conv2d):
                n = m.kernel_size[0] * m.kernel_size[1] * m.out_channels
                m.weight.data.normal_(0, math.sqrt(2. / n))
            elif isinstance(m, nn.BatchNorm2d):
                m.weight.data.fill_(1)
                m.bias.data.zero_()

    def forward(self, x):
        x = self.layer0(x)
        x = self.layer1(x)
        x = self.layer2(x)
        x = self.layer3(x)
        x = self.layer4(x)

        x = F.adaptive_avg_pool2d(x, output_size=1)
        x = x.view(x.size(0), -1)
        x = self.fc (x)
        return x #logits


** dataset setting **
	train_dataset.split = train_id_v0_7019896
	valid_dataset.split = valid_id_v0_5000
	len(train_dataset)  = 12283645
	len(valid_dataset)  = 8785
	len(train_loader)   = 95965
	len(valid_loadernum_iters)   = 69
	batch_size  = 128
	iter_accum  = 4
	batch_size*iter_accum  = 512

def train_augment(image): 
    if random.random() < 0.5:
        image = random_shift_scale_rotate(image,
                #shift_limit  = [0, 0],
                shift_limit  = [-0.06,  0.06],
                scale_limit  = [0.9, 1.2],
                rotate_limit = [-10,10],
                aspect_limit = [1,1],
                #size=[1,299],
        borderMode=cv2.BORDER_REFLECT_101 , u=1)
    else:
        pass

    # flip  random ---------
    image = random_horizontal_flip(image, u=0.5)

    tensor = image_to_tensor_transform(image)
    return tensor

def valid_augment(image): 
    tensor = image_to_tensor_transform(image)
    return tensor


	initial_checkpoint = /home/ck/project/results/excited-resnet50-180-00a/checkpoint/00035000_model.pth
** start training here! **
 optimizer=<torch.optim.sgd.SGD object at 0x7f8eabaa58d0>

--- [START 2017-10-11 22:48:40] ----------------------------------------------------------------

** some experiment setting **
	SEED         = 1507733320
	PROJECT_PATH = /home/ck/project/build/dummy-00
	out_dir      = /home/ck/project/results/excited-resnet50-180-00a

** net setting **
<class 'net.model.cdiscount.excited_resnet50.SEResNet50'>


SEResNet50 (
  (layer0): Sequential (
    (0): ConvBn2d (
      (conv): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
      (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
    )
    (1): ReLU (inplace)
    (2): MaxPool2d (size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=(1, 1))
  )
  (layer1): Sequential (
    (0): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(256, 16, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(16, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (downsample): ConvBn2d (
        (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
    )
    (1): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(256, 16, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(16, 256, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (2): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(256, 16, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(16, 256, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (layer2): Sequential (
    (0): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(512, 32, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(32, 512, kernel_size=(1, 1), stride=(1, 1))
      )
      (downsample): ConvBn2d (
        (conv): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
    )
    (1): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(512, 32, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(32, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (2): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(512, 32, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(32, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (3): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(512, 32, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(32, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (layer3): Sequential (
    (0): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
      (downsample): ConvBn2d (
        (conv): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
    )
    (1): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (2): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (3): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (4): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (5): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (layer4): Sequential (
    (0): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(2048, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(2048, 128, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(128, 2048, kernel_size=(1, 1), stride=(1, 1))
      )
      (downsample): ConvBn2d (
        (conv): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (bn): BatchNorm2d(2048, eps=0.0001, momentum=0.1, affine=True)
      )
    )
    (1): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(2048, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(2048, 128, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(128, 2048, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (2): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(2048, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(2048, 128, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(128, 2048, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (fc): Linear (2048 -> 5270)
)
    def __init__(self, in_shape=(3,128,128), num_classes=5000 ):

        super(SEResNet50, self).__init__()
        in_channels, height, width = in_shape

        self.layer0 = nn.Sequential(
            ConvBn2d(in_channels, 64, kernel_size=7, stride=2, padding=3),
            nn.ReLU(inplace=True),
            nn.MaxPool2d(kernel_size=3, stride=2, padding=1),
            #nn.MaxPool2d(kernel_size=2, stride=2, padding=0),
        )
        self.layer1 = make_layer(SEBottleneck,   64,  64, 4, 16, num_blocks=3, stride=1)  #out =  64*4 =  256
        self.layer2 = make_layer(SEBottleneck,  256, 128, 4, 32, num_blocks=4, stride=2)  #out = 128*4 =  512
        self.layer3 = make_layer(SEBottleneck,  512, 256, 4, 64, num_blocks=6, stride=2)  #out = 256*4 = 1024
        self.layer4 = make_layer(SEBottleneck, 1024, 512, 4,128, num_blocks=3, stride=2)  #out = 512*4 = 2048
        self.fc  = nn.Linear(2048, num_classes)


        for m in self.modules():
            if isinstance(m, nn.Conv2d):
                n = m.kernel_size[0] * m.kernel_size[1] * m.out_channels
                m.weight.data.normal_(0, math.sqrt(2. / n))
            elif isinstance(m, nn.BatchNorm2d):
                m.weight.data.fill_(1)
                m.bias.data.zero_()

    def forward(self, x):
        x = self.layer0(x)
        x = self.layer1(x)
        x = self.layer2(x)
        x = self.layer3(x)
        x = self.layer4(x)

        x = F.adaptive_avg_pool2d(x, output_size=1)
        x = x.view(x.size(0), -1)
        x = self.fc (x)
        return x #logits


** dataset setting **
	train_dataset.split = train_id_v0_7019896
	valid_dataset.split = valid_id_v0_5000
	len(train_dataset)  = 12283645
	len(valid_dataset)  = 8785
	len(train_loader)   = 95965
	len(valid_loadernum_iters)   = 69
	batch_size  = 128
	iter_accum  = 4
	batch_size*iter_accum  = 512

def train_augment(image): 
    if random.random() < 0.5:
        image = random_shift_scale_rotate(image,
                #shift_limit  = [0, 0],
                shift_limit  = [-0.06,  0.06],
                scale_limit  = [0.9, 1.2],
                rotate_limit = [-10,10],
                aspect_limit = [1,1],
                #size=[1,299],
        borderMode=cv2.BORDER_REFLECT_101 , u=1)
    else:
        pass

    # flip  random ---------
    image = random_horizontal_flip(image, u=0.5)

    tensor = image_to_tensor_transform(image)
    return tensor

def valid_augment(image): 
    tensor = image_to_tensor_transform(image)
    return tensor


	initial_checkpoint = /home/ck/project/results/excited-resnet50-180-00a/checkpoint/00035000_model.pth
** start training here! **
 optimizer=<torch.optim.sgd.SGD object at 0x7ffb888a9748>
 momentum=0.300000
 LR=Step Learning Rates
rates=[' 0.0010']
steps=['      0']

   rate   iter   epoch  | valid_loss/acc | train_loss/acc | batch_loss/acc |  time   
-------------------------------------------------------------------------------------
0.0000   35.0 k   1.46  | 1.5346  0.6697 | 0.0000  0.0000 | 0.0000  0.0000 |     0 min 
0.0010   36.0 k   1.50  | 1.5286  0.6721 | 1.4512  0.6771 | 1.5523  0.6328 |    46 min 
0.0010   37.0 k   1.54  | 1.5267  0.6733 | 1.4393  0.6781 | 1.2646  0.6953 |    92 min 
0.0010   38.0 k   1.58  | 1.5240  0.6729 | 1.4121  0.6825 | 1.2398  0.6875 |   138 min 
0.0010   39.0 k   1.63  | 1.5232  0.6735 | 1.4541  0.6754 | 1.4821  0.6953 |   184 min 
0.0010   40.0 k   1.67  | 1.5214  0.6734 | 1.4063  0.6859 | 1.7567  0.6328 |   231 min 
0.0010   41.0 k   1.71  | 1.5220  0.6743 | 1.4651  0.6788 | 1.5731  0.6875 |   277 min 
0.0010   42.0 k   1.75  | 1.5210  0.6741 | 1.3671  0.6949 | 1.2735  0.7656 |   323 min 
0.0010   43.0 k   1.79  | 1.5201  0.6749 | 1.4008  0.6890 | 1.7998  0.6172 |   369 min 
0.0010   44.0 k   1.83  | 1.5201  0.6727 | 1.4419  0.6793 | 1.5810  0.6719 |   415 min 
0.0010   45.0 k   1.88  | 1.5194  0.6740 | 1.4028  0.6895 | 1.1351  0.7422 |   460 min 
0.0010   46.0 k   1.92  | 1.5189  0.6732 | 1.4321  0.6785 | 1.4213  0.6562 |   506 min 
0.0010   47.0 k   1.96  | 1.5189  0.6748 | 1.4515  0.6724 | 1.5628  0.6875 |   552 min 
0.0010   48.0 k   2.00  | 1.5163  0.6740 | 1.4603  0.6751 | 1.4477  0.6875 |   598 min 

--- [START 2017-10-12 09:08:31] ----------------------------------------------------------------

** some experiment setting **
	SEED         = 1507770511
	PROJECT_PATH = /home/ck/project/build/dummy-00
	out_dir      = /home/ck/project/results/excited-resnet50-180-00a

** net setting **
<class 'net.model.cdiscount.excited_resnet50.SEResNet50'>


SEResNet50 (
  (layer0): Sequential (
    (0): ConvBn2d (
      (conv): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
      (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
    )
    (1): ReLU (inplace)
    (2): MaxPool2d (size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=(1, 1))
  )
  (layer1): Sequential (
    (0): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(256, 16, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(16, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (downsample): ConvBn2d (
        (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
    )
    (1): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(256, 16, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(16, 256, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (2): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(256, 16, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(16, 256, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (layer2): Sequential (
    (0): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(512, 32, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(32, 512, kernel_size=(1, 1), stride=(1, 1))
      )
      (downsample): ConvBn2d (
        (conv): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
    )
    (1): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(512, 32, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(32, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (2): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(512, 32, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(32, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (3): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(512, 32, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(32, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (layer3): Sequential (
    (0): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
      (downsample): ConvBn2d (
        (conv): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
    )
    (1): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (2): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (3): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (4): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (5): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (layer4): Sequential (
    (0): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(2048, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(2048, 128, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(128, 2048, kernel_size=(1, 1), stride=(1, 1))
      )
      (downsample): ConvBn2d (
        (conv): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (bn): BatchNorm2d(2048, eps=0.0001, momentum=0.1, affine=True)
      )
    )
    (1): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(2048, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(2048, 128, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(128, 2048, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (2): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(2048, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(2048, 128, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(128, 2048, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (fc): Linear (2048 -> 5270)
)
    def __init__(self, in_shape=(3,128,128), num_classes=5000 ):

        super(SEResNet50, self).__init__()
        in_channels, height, width = in_shape

        self.layer0 = nn.Sequential(
            ConvBn2d(in_channels, 64, kernel_size=7, stride=2, padding=3),
            nn.ReLU(inplace=True),
            nn.MaxPool2d(kernel_size=3, stride=2, padding=1),
            #nn.MaxPool2d(kernel_size=2, stride=2, padding=0),
        )
        self.layer1 = make_layer(SEBottleneck,   64,  64, 4, 16, num_blocks=3, stride=1)  #out =  64*4 =  256
        self.layer2 = make_layer(SEBottleneck,  256, 128, 4, 32, num_blocks=4, stride=2)  #out = 128*4 =  512
        self.layer3 = make_layer(SEBottleneck,  512, 256, 4, 64, num_blocks=6, stride=2)  #out = 256*4 = 1024
        self.layer4 = make_layer(SEBottleneck, 1024, 512, 4,128, num_blocks=3, stride=2)  #out = 512*4 = 2048
        self.fc  = nn.Linear(2048, num_classes)


        for m in self.modules():
            if isinstance(m, nn.Conv2d):
                n = m.kernel_size[0] * m.kernel_size[1] * m.out_channels
                m.weight.data.normal_(0, math.sqrt(2. / n))
            elif isinstance(m, nn.BatchNorm2d):
                m.weight.data.fill_(1)
                m.bias.data.zero_()

    def forward(self, x):
        x = self.layer0(x)
        x = self.layer1(x)
        x = self.layer2(x)
        x = self.layer3(x)
        x = self.layer4(x)

        x = F.adaptive_avg_pool2d(x, output_size=1)
        x = x.view(x.size(0), -1)
        x = self.fc (x)
        return x #logits


** dataset setting **
	train_dataset.split = train_id_v0_7019896
	valid_dataset.split = valid_id_v0_5000
	len(train_dataset)  = 12283645
	len(valid_dataset)  = 8785
	len(train_loader)   = 95965
	len(valid_loadernum_iters)   = 69
	batch_size  = 128
	iter_accum  = 4
	batch_size*iter_accum  = 512

def train_augment(image): 
    if random.random() < 0.5:
        image = random_shift_scale_rotate(image,
                #shift_limit  = [0, 0],
                shift_limit  = [-0.07,  0.07],
                scale_limit  = [0.85, 1.3],
                rotate_limit = [-10,10],
                aspect_limit = [1,1],
                #size=[1,299],
        borderMode=cv2.BORDER_REFLECT_101 , u=1)
    else:
        pass

    # flip  random ---------
    image = random_horizontal_flip(image, u=0.5)

    tensor = image_to_tensor_transform(image)
    return tensor

def valid_augment(image): 
    tensor = image_to_tensor_transform(image)
    return tensor


	initial_checkpoint = /home/ck/project/results/excited-resnet50-180-00a/checkpoint/00048000_model.pth
** start training here! **
 optimizer=<torch.optim.sgd.SGD object at 0x7fbd0573fe10>
 momentum=0.300000
 LR=Step Learning Rates
rates=[' 0.0010']
steps=['      0']

   rate   iter   epoch  | valid_loss/acc | train_loss/acc | batch_loss/acc |  time   
-------------------------------------------------------------------------------------
0.0000   48.0 k   2.00  | 1.5163  0.6740 | 0.0000  0.0000 | 0.0000  0.0000 |     0 min 
0.0010   49.0 k   2.04  | 1.5159  0.6736 | 1.4688  0.6711 | 1.6372  0.6875 |    47 min 
0.0010   50.0 k   2.08  | 1.5175  0.6744 | 1.4157  0.6827 | 1.5435  0.7188 |    93 min 
0.0010   51.0 k   2.13  | 1.5173  0.6754 | 1.4397  0.6774 | 0.9710  0.7578 |   139 min 
0.0010   52.0 k   2.17  | 1.5175  0.6750 | 1.4172  0.6817 | 1.6458  0.6562 |   184 min 

--- [START 2017-10-12 12:34:25] ----------------------------------------------------------------

** some experiment setting **
	SEED         = 1507782865
	PROJECT_PATH = /home/ck/project/build/dummy-00
	out_dir      = /home/ck/project/results/excited-resnet50-180-00a

** net setting **
<class 'net.model.cdiscount.excited_resnet50.SEResNet50'>


SEResNet50 (
  (layer0): Sequential (
    (0): ConvBn2d (
      (conv): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
      (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
    )
    (1): ReLU (inplace)
    (2): MaxPool2d (size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=(1, 1))
  )
  (layer1): Sequential (
    (0): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(256, 16, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(16, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (downsample): ConvBn2d (
        (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
    )
    (1): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(256, 16, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(16, 256, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (2): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(256, 16, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(16, 256, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (layer2): Sequential (
    (0): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(512, 32, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(32, 512, kernel_size=(1, 1), stride=(1, 1))
      )
      (downsample): ConvBn2d (
        (conv): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
    )
    (1): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(512, 32, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(32, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (2): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(512, 32, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(32, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (3): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(512, 32, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(32, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (layer3): Sequential (
    (0): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
      (downsample): ConvBn2d (
        (conv): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
    )
    (1): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (2): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (3): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (4): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (5): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (layer4): Sequential (
    (0): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(2048, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(2048, 128, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(128, 2048, kernel_size=(1, 1), stride=(1, 1))
      )
      (downsample): ConvBn2d (
        (conv): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (bn): BatchNorm2d(2048, eps=0.0001, momentum=0.1, affine=True)
      )
    )
    (1): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(2048, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(2048, 128, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(128, 2048, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (2): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(2048, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(2048, 128, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(128, 2048, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (fc): Linear (2048 -> 5270)
)
    def __init__(self, in_shape=(3,128,128), num_classes=5000 ):

        super(SEResNet50, self).__init__()
        in_channels, height, width = in_shape

        self.layer0 = nn.Sequential(
            ConvBn2d(in_channels, 64, kernel_size=7, stride=2, padding=3),
            nn.ReLU(inplace=True),
            nn.MaxPool2d(kernel_size=3, stride=2, padding=1),
            #nn.MaxPool2d(kernel_size=2, stride=2, padding=0),
        )
        self.layer1 = make_layer(SEBottleneck,   64,  64, 4, 16, num_blocks=3, stride=1)  #out =  64*4 =  256
        self.layer2 = make_layer(SEBottleneck,  256, 128, 4, 32, num_blocks=4, stride=2)  #out = 128*4 =  512
        self.layer3 = make_layer(SEBottleneck,  512, 256, 4, 64, num_blocks=6, stride=2)  #out = 256*4 = 1024
        self.layer4 = make_layer(SEBottleneck, 1024, 512, 4,128, num_blocks=3, stride=2)  #out = 512*4 = 2048
        self.fc  = nn.Linear(2048, num_classes)


        for m in self.modules():
            if isinstance(m, nn.Conv2d):
                n = m.kernel_size[0] * m.kernel_size[1] * m.out_channels
                m.weight.data.normal_(0, math.sqrt(2. / n))
            elif isinstance(m, nn.BatchNorm2d):
                m.weight.data.fill_(1)
                m.bias.data.zero_()

    def forward(self, x):
        x = self.layer0(x)
        x = self.layer1(x)
        x = self.layer2(x)
        x = self.layer3(x)
        x = self.layer4(x)

        x = F.adaptive_avg_pool2d(x, output_size=1)
        x = x.view(x.size(0), -1)
        x = self.fc (x)
        return x #logits


** dataset setting **
	train_dataset.split = train_id_v0_7019896
	valid_dataset.split = valid_id_v0_5000
	len(train_dataset)  = 12283645
	len(valid_dataset)  = 8785
	len(train_loader)   = 95965
	len(valid_loadernum_iters)   = 69
	batch_size  = 128
	iter_accum  = 4
	batch_size*iter_accum  = 512

def train_augment(image): 
    if random.random() < 0.7:
        image = random_shift_scale_rotate(image,
                #shift_limit  = [0, 0],
                shift_limit  = [-0.07,  0.07],
                scale_limit  = [0.85, 1.4],
                rotate_limit = [-10,10],
                aspect_limit = [1,1],
                #size=[1,299],
        borderMode=cv2.BORDER_REFLECT_101 , u=1)
    else:
        pass

    # flip  random ---------
    image = random_horizontal_flip(image, u=0.5)

    tensor = image_to_tensor_transform(image)
    return tensor

def valid_augment(image): 
    tensor = image_to_tensor_transform(image)
    return tensor


	initial_checkpoint = /home/ck/project/results/excited-resnet50-180-00a/checkpoint/00052000_model.pth
** start training here! **
 optimizer=<torch.optim.sgd.SGD object at 0x7f33e3f39e10>
 momentum=0.300000
 LR=Step Learning Rates
rates=[' 0.0010']
steps=['      0']

   rate   iter   epoch  | valid_loss/acc | train_loss/acc | batch_loss/acc |  time   
-------------------------------------------------------------------------------------
0.0000   52.0 k   2.17  | 1.5175  0.6750 | 0.0000  0.0000 | 0.0000  0.0000 |     0 min 
0.0010   53.0 k   2.21  | 1.5194  0.6742 | 1.4453  0.6746 | 1.4432  0.6562 |    46 min 
0.0010   54.0 k   2.25  | 1.5231  0.6741 | 1.4193  0.6864 | 1.2238  0.7188 |    91 min 

--- [START 2017-10-12 14:12:28] ----------------------------------------------------------------

** some experiment setting **
	SEED         = 1507788748
	PROJECT_PATH = /home/ck/project/build/dummy-00
	out_dir      = /home/ck/project/results/excited-resnet50-180-00a

** net setting **
<class 'net.model.cdiscount.excited_resnet50.SEResNet50'>


SEResNet50 (
  (layer0): Sequential (
    (0): ConvBn2d (
      (conv): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
      (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
    )
    (1): ReLU (inplace)
    (2): MaxPool2d (size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=(1, 1))
  )
  (layer1): Sequential (
    (0): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(256, 16, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(16, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (downsample): ConvBn2d (
        (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
    )
    (1): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(256, 16, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(16, 256, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (2): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(256, 16, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(16, 256, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (layer2): Sequential (
    (0): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(512, 32, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(32, 512, kernel_size=(1, 1), stride=(1, 1))
      )
      (downsample): ConvBn2d (
        (conv): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
    )
    (1): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(512, 32, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(32, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (2): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(512, 32, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(32, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (3): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(512, 32, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(32, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (layer3): Sequential (
    (0): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
      (downsample): ConvBn2d (
        (conv): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
    )
    (1): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (2): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (3): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (4): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (5): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (layer4): Sequential (
    (0): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(2048, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(2048, 128, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(128, 2048, kernel_size=(1, 1), stride=(1, 1))
      )
      (downsample): ConvBn2d (
        (conv): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (bn): BatchNorm2d(2048, eps=0.0001, momentum=0.1, affine=True)
      )
    )
    (1): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(2048, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(2048, 128, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(128, 2048, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (2): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(2048, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(2048, 128, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(128, 2048, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (fc): Linear (2048 -> 5270)
)
    def __init__(self, in_shape=(3,128,128), num_classes=5000 ):

        super(SEResNet50, self).__init__()
        in_channels, height, width = in_shape

        self.layer0 = nn.Sequential(
            ConvBn2d(in_channels, 64, kernel_size=7, stride=2, padding=3),
            nn.ReLU(inplace=True),
            nn.MaxPool2d(kernel_size=3, stride=2, padding=1),
            #nn.MaxPool2d(kernel_size=2, stride=2, padding=0),
        )
        self.layer1 = make_layer(SEBottleneck,   64,  64, 4, 16, num_blocks=3, stride=1)  #out =  64*4 =  256
        self.layer2 = make_layer(SEBottleneck,  256, 128, 4, 32, num_blocks=4, stride=2)  #out = 128*4 =  512
        self.layer3 = make_layer(SEBottleneck,  512, 256, 4, 64, num_blocks=6, stride=2)  #out = 256*4 = 1024
        self.layer4 = make_layer(SEBottleneck, 1024, 512, 4,128, num_blocks=3, stride=2)  #out = 512*4 = 2048
        self.fc  = nn.Linear(2048, num_classes)


        for m in self.modules():
            if isinstance(m, nn.Conv2d):
                n = m.kernel_size[0] * m.kernel_size[1] * m.out_channels
                m.weight.data.normal_(0, math.sqrt(2. / n))
            elif isinstance(m, nn.BatchNorm2d):
                m.weight.data.fill_(1)
                m.bias.data.zero_()

    def forward(self, x):
        x = self.layer0(x)
        x = self.layer1(x)
        x = self.layer2(x)
        x = self.layer3(x)
        x = self.layer4(x)

        x = F.adaptive_avg_pool2d(x, output_size=1)
        x = x.view(x.size(0), -1)
        x = self.fc (x)
        return x #logits


** dataset setting **
	train_dataset.split = train_id_v0_7019896
	valid_dataset.split = valid_id_v0_5000
	len(train_dataset)  = 12283645
	len(valid_dataset)  = 8785
	len(train_loader)   = 95965
	len(valid_loadernum_iters)   = 69
	batch_size  = 128
	iter_accum  = 4
	batch_size*iter_accum  = 512

def train_augment(image): 
    if random.random() < 0.7:
        image = random_shift_scale_rotate(image,
                #shift_limit  = [0, 0],
                shift_limit  = [-0.07,  0.07],
                scale_limit  = [0.85, 1.4],
                rotate_limit = [-10,10],
                aspect_limit = [1,1],
                #size=[1,299],
        borderMode=cv2.BORDER_REFLECT_101 , u=1)
    else:
        pass

    # flip  random ---------
    image = random_horizontal_flip(image, u=0.5)

    tensor = image_to_tensor_transform(image)
    return tensor

def valid_augment(image): 
    tensor = image_to_tensor_transform(image)
    return tensor


	initial_checkpoint = /home/ck/project/results/excited-resnet50-180-00a/checkpoint/00052000_model.pth
** start training here! **
 optimizer=<torch.optim.sgd.SGD object at 0x7f45f70cf748>
 momentum=0.300000
 LR=Step Learning Rates
rates=[' 0.0010']
steps=['      0']

   rate   iter   epoch  | valid_loss/acc | train_loss/acc | batch_loss/acc |  time   
-------------------------------------------------------------------------------------
0.0000   52.0 k   2.17  | 1.5175  0.6750 | 0.0000  0.0000 | 0.0000  0.0000 |     0 min 
0.0010   53.0 k   2.21  | 1.5194  0.6726 | 1.4873  0.6669 | 1.6219  0.6953 |    47 min 

--- [START 2017-10-12 15:37:08] ----------------------------------------------------------------

** some experiment setting **
	SEED         = 1507793827
	PROJECT_PATH = /home/ck/project/build/dummy-00
	out_dir      = /home/ck/project/results/excited-resnet50-180-00a

** net setting **
<class 'net.model.cdiscount.excited_resnet50.SEResNet50'>


SEResNet50 (
  (layer0): Sequential (
    (0): ConvBn2d (
      (conv): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
      (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
    )
    (1): ReLU (inplace)
    (2): MaxPool2d (size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=(1, 1))
  )
  (layer1): Sequential (
    (0): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(256, 16, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(16, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (downsample): ConvBn2d (
        (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
    )
    (1): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(256, 16, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(16, 256, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (2): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(256, 16, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(16, 256, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (layer2): Sequential (
    (0): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(512, 32, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(32, 512, kernel_size=(1, 1), stride=(1, 1))
      )
      (downsample): ConvBn2d (
        (conv): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
    )
    (1): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(512, 32, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(32, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (2): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(512, 32, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(32, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (3): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(512, 32, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(32, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (layer3): Sequential (
    (0): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
      (downsample): ConvBn2d (
        (conv): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
    )
    (1): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (2): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (3): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (4): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (5): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (layer4): Sequential (
    (0): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(2048, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(2048, 128, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(128, 2048, kernel_size=(1, 1), stride=(1, 1))
      )
      (downsample): ConvBn2d (
        (conv): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (bn): BatchNorm2d(2048, eps=0.0001, momentum=0.1, affine=True)
      )
    )
    (1): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(2048, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(2048, 128, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(128, 2048, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (2): SEBottleneck (
      (conv_bn1): ConvBn2d (
        (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn2): ConvBn2d (
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.1, affine=True)
      )
      (conv_bn3): ConvBn2d (
        (conv): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(2048, eps=0.0001, momentum=0.1, affine=True)
      )
      (scale): SEScale (
        (fc1): Conv2d(2048, 128, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(128, 2048, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (fc): Linear (2048 -> 5270)
)
    def __init__(self, in_shape=(3,128,128), num_classes=5000 ):

        super(SEResNet50, self).__init__()
        in_channels, height, width = in_shape

        self.layer0 = nn.Sequential(
            ConvBn2d(in_channels, 64, kernel_size=7, stride=2, padding=3),
            nn.ReLU(inplace=True),
            nn.MaxPool2d(kernel_size=3, stride=2, padding=1),
            #nn.MaxPool2d(kernel_size=2, stride=2, padding=0),
        )
        self.layer1 = make_layer(SEBottleneck,   64,  64, 4, 16, num_blocks=3, stride=1)  #out =  64*4 =  256
        self.layer2 = make_layer(SEBottleneck,  256, 128, 4, 32, num_blocks=4, stride=2)  #out = 128*4 =  512
        self.layer3 = make_layer(SEBottleneck,  512, 256, 4, 64, num_blocks=6, stride=2)  #out = 256*4 = 1024
        self.layer4 = make_layer(SEBottleneck, 1024, 512, 4,128, num_blocks=3, stride=2)  #out = 512*4 = 2048
        self.fc  = nn.Linear(2048, num_classes)


        for m in self.modules():
            if isinstance(m, nn.Conv2d):
                n = m.kernel_size[0] * m.kernel_size[1] * m.out_channels
                m.weight.data.normal_(0, math.sqrt(2. / n))
            elif isinstance(m, nn.BatchNorm2d):
                m.weight.data.fill_(1)
                m.bias.data.zero_()

    def forward(self, x):
        x = self.layer0(x)
        x = self.layer1(x)
        x = self.layer2(x)
        x = self.layer3(x)
        x = self.layer4(x)

        x = F.adaptive_avg_pool2d(x, output_size=1)
        x = x.view(x.size(0), -1)
        x = self.fc (x)
        return x #logits


** dataset setting **
	train_dataset.split = train_id_v0_7019896
	valid_dataset.split = valid_id_v0_5000
	len(train_dataset)  = 12283645
	len(valid_dataset)  = 8785
	len(train_loader)   = 95965
	len(valid_loadernum_iters)   = 69
	batch_size  = 128
	iter_accum  = 4
	batch_size*iter_accum  = 512

def train_augment(image): 
    # if random.random() < 0.5:
    #     image = random_shift_scale_rotate(image,
    #             #shift_limit  = [0, 0],
    #             shift_limit  = [-0.07,  0.07],
    #             scale_limit  = [0.85, 1.4],
    #             rotate_limit = [-10,10],
    #             aspect_limit = [1,1],
    #             #size=[1,299],
    #     borderMode=cv2.BORDER_REFLECT_101 , u=1)
    # else:
    #     pass

    # flip  random ---------
    image = random_horizontal_flip(image, u=0.5)

    tensor = image_to_tensor_transform(image)
    return tensor

def valid_augment(image): 
    tensor = image_to_tensor_transform(image)
    return tensor


	initial_checkpoint = /home/ck/project/results/excited-resnet50-180-00a/checkpoint/00052000_model.pth
** start training here! **
 optimizer=<torch.optim.sgd.SGD object at 0x7ff9c8a91630>
 momentum=0.300000
 LR=Step Learning Rates
rates=[' 0.0010']
steps=['      0']

   rate   iter   epoch  | valid_loss/acc | train_loss/acc | batch_loss/acc |  time   
-------------------------------------------------------------------------------------
0.0000   52.0 k   2.17  | 1.5175  0.6750 | 0.0000  0.0000 | 0.0000  0.0000 |     0 min 
0.0010   53.0 k   2.21  | 1.5153  0.6754 | 1.3683  0.6879 | 1.1268  0.7500 |    48 min 
0.0010   54.0 k   2.25  | 1.5134  0.6732 | 1.3539  0.6960 | 1.5460  0.6797 |    96 min 
0.0010   55.0 k   2.29  | 1.5125  0.6746 | 1.3589  0.6890 | 1.4593  0.6562 |   144 min 
0.0010   56.0 k   2.33  | 1.5134  0.6771 | 1.4142  0.6820 | 1.4210  0.6641 |   192 min 
0.0010   57.0 k   2.38  | 1.5114  0.6754 | 1.3990  0.6876 | 1.4207  0.6875 |   239 min 
0.0010   58.0 k   2.42  | 1.5100  0.6757 | 1.3591  0.6924 | 1.1184  0.7109 |   286 min 
0.0010   59.0 k   2.46  | 1.5103  0.6732 | 1.3651  0.6908 | 1.5092  0.6719 |   334 min 
0.0010   60.0 k   2.50  | 1.5101  0.6744 | 1.3825  0.6912 | 1.4330  0.6484 |   382 min 
0.0010   61.0 k   2.54  | 1.5090  0.6749 | 1.3812  0.6909 | 1.4771  0.6875 |   429 min 
