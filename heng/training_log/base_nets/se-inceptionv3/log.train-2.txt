
--- [START 2017-10-11 09:58:12] ----------------------------------------------------------------

** some experiment setting **
	SEED         = 1507687091
	PROJECT_PATH = /home/ck/project/build/dummy-00
	out_dir      = /home/ck/project/results/excited-inception3-180-02c
	pretrained_file    = /home/ck/project/results/inception3-180-02a/checkpoint/00049000_model.pth
	initial_checkpoint = /home/ck/project/results/excited-inception3-180-02b/checkpoint/00039000_model.pth

** net setting **
<class 'net.model.cdiscount.excited_inception_v3.SEInception3'>


SEInception3 (
  (Conv2d_1a_3x3): BasicConv2d (
    (conv): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), bias=False)
    (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True)
  )
  (Conv2d_2a_3x3): BasicConv2d (
    (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), bias=False)
    (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True)
  )
  (Conv2d_2b_3x3): BasicConv2d (
    (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
  )
  (Conv2d_3b_1x1): BasicConv2d (
    (conv): Conv2d(64, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (bn): BatchNorm2d(80, eps=0.001, momentum=0.1, affine=True)
  )
  (Conv2d_4a_3x3): BasicConv2d (
    (conv): Conv2d(80, 192, kernel_size=(3, 3), stride=(1, 1), bias=False)
    (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
  )
  (Mixed_5b): InceptionA (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_1): BasicConv2d (
      (conv): Conv2d(192, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_2): BasicConv2d (
      (conv): Conv2d(48, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3): BasicConv2d (
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (192 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 192)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_5c): InceptionA (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_1): BasicConv2d (
      (conv): Conv2d(256, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_2): BasicConv2d (
      (conv): Conv2d(48, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3): BasicConv2d (
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (256 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 256)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_5d): InceptionA (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_1): BasicConv2d (
      (conv): Conv2d(288, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_2): BasicConv2d (
      (conv): Conv2d(48, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3): BasicConv2d (
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (288 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 288)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_6a): InceptionB (
    (branch3x3): BasicConv2d (
      (conv): Conv2d(288, 384, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3): BasicConv2d (
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (288 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 288)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_6b): InceptionC (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_1): BasicConv2d (
      (conv): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_2): BasicConv2d (
      (conv): Conv2d(128, 128, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_3): BasicConv2d (
      (conv): Conv2d(128, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_1): BasicConv2d (
      (conv): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_2): BasicConv2d (
      (conv): Conv2d(128, 128, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_3): BasicConv2d (
      (conv): Conv2d(128, 128, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_4): BasicConv2d (
      (conv): Conv2d(128, 128, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_5): BasicConv2d (
      (conv): Conv2d(128, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (768 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 768)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_6c): InceptionC (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_1): BasicConv2d (
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_2): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_3): BasicConv2d (
      (conv): Conv2d(160, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_1): BasicConv2d (
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_2): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_3): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_4): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_5): BasicConv2d (
      (conv): Conv2d(160, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (768 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 768)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_6d): InceptionC (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_1): BasicConv2d (
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_2): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_3): BasicConv2d (
      (conv): Conv2d(160, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_1): BasicConv2d (
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_2): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_3): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_4): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_5): BasicConv2d (
      (conv): Conv2d(160, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (768 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 768)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_6e): InceptionC (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_2): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_3): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_2): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_3): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_4): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_5): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (768 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 768)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_7a): InceptionD (
    (branch3x3_1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_2): BasicConv2d (
      (conv): Conv2d(192, 320, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(320, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7x3_1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7x3_2): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7x3_3): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7x3_4): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (768 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 768)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_7b): InceptionE (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(320, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_1): BasicConv2d (
      (conv): Conv2d(1280, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_2a): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_2b): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(1280, 448, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(448, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(448, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3a): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3b): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(1280, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (1280 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 1280)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_7c): InceptionE (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(2048, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(320, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_1): BasicConv2d (
      (conv): Conv2d(2048, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_2a): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_2b): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(2048, 448, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(448, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(448, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3a): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3b): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(2048, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (2048 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 2048)
        (3): Sigmoid ()
      )
    )
  )
  (fc): Linear (2048 -> 5270)
)
    def __init__(self, in_shape=(3,128,128), num_classes=1000 ):
        super(SEInception3, self).__init__()
        in_channels, height, width = in_shape
        self.num_classes=num_classes
        assert(in_channels==3)

        # self.aux_logits = aux_logits
        # self.transform_input = transform_input
        self.Conv2d_1a_3x3 = BasicConv2d(in_channels, 32, kernel_size=3, stride=2)
        self.Conv2d_2a_3x3 = BasicConv2d(32, 32, kernel_size=3)
        self.Conv2d_2b_3x3 = BasicConv2d(32, 64, kernel_size=3, padding=1)
        self.Conv2d_3b_1x1 = BasicConv2d(64, 80, kernel_size=1)
        self.Conv2d_4a_3x3 = BasicConv2d(80, 192, kernel_size=3)
        self.Mixed_5b = InceptionA(192, pool_features=32)
        self.Mixed_5c = InceptionA(256, pool_features=64)
        self.Mixed_5d = InceptionA(288, pool_features=64)
        self.Mixed_6a = InceptionB(288)
        self.Mixed_6b = InceptionC(768, channels_7x7=128)
        self.Mixed_6c = InceptionC(768, channels_7x7=160)
        self.Mixed_6d = InceptionC(768, channels_7x7=160)
        self.Mixed_6e = InceptionC(768, channels_7x7=192)
        # if aux_logits:
        #     self.AuxLogits = InceptionAux(768, num_classes)
        self.Mixed_7a = InceptionD(768)
        self.Mixed_7b = InceptionE(1280)
        self.Mixed_7c = InceptionE(2048)

        ##------------------------------------------------------------
        ## add se
        self.Mixed_5b.add_module("SELayer", SELayer(192))
        self.Mixed_5c.add_module("SELayer", SELayer(256))
        self.Mixed_5d.add_module("SELayer", SELayer(288))
        self.Mixed_6a.add_module("SELayer", SELayer(288))
        self.Mixed_6b.add_module("SELayer", SELayer(768))
        self.Mixed_6c.add_module("SELayer", SELayer(768))
        self.Mixed_6d.add_module("SELayer", SELayer(768))
        self.Mixed_6e.add_module("SELayer", SELayer(768))
        self.Mixed_7a.add_module("SELayer", SELayer(768))
        self.Mixed_7b.add_module("SELayer", SELayer(1280))
        self.Mixed_7c.add_module("SELayer", SELayer(2048))

        ##------------------------------------------------------------
        self.fc = nn.Linear(2048, num_classes)

        for m in self.modules():
            if isinstance(m, nn.Conv2d) or isinstance(m, nn.Linear):
                import scipy.stats as stats
                stddev = m.stddev if hasattr(m, 'stddev') else 0.1
                X = stats.truncnorm(-2, 2, scale=stddev)
                values = torch.Tensor(X.rvs(m.weight.data.numel()))
                values = values.view(m.weight.data.size())
                m.weight.data.copy_(values)
            elif isinstance(m, nn.BatchNorm2d):
                m.weight.data.fill_(1)
                m.bias.data.zero_()

    def forward(self, x):

        # if self.transform_input:
        #     x = x.clone()
        #     x[:, 0] = x[:, 0] * (0.229 / 0.5) + (0.485 - 0.5) / 0.5
        #     x[:, 1] = x[:, 1] * (0.224 / 0.5) + (0.456 - 0.5) / 0.5
        #     x[:, 2] = x[:, 2] * (0.225 / 0.5) + (0.406 - 0.5) / 0.5


        # 299 x 299 x 3
        x = self.Conv2d_1a_3x3(x)
        # 149 x 149 x 32
        x = self.Conv2d_2a_3x3(x)
        # 147 x 147 x 32
        x = self.Conv2d_2b_3x3(x)
        # 147 x 147 x 64
        x = F.max_pool2d(x, kernel_size=3, stride=2)
        # 73 x 73 x 64
        x = self.Conv2d_3b_1x1(x)
        # 73 x 73 x 80
        x = self.Conv2d_4a_3x3(x)
        # 71 x 71 x 192
        x = F.max_pool2d(x, kernel_size=3, stride=2)
        # 35 x 35 x 192
        x = self.Mixed_5b(x)
        # 35 x 35 x 256
        x = self.Mixed_5c(x)
        # 35 x 35 x 288
        x = self.Mixed_5d(x)
        # 35 x 35 x 288
        x = self.Mixed_6a(x)
        # 17 x 17 x 768
        x = self.Mixed_6b(x)
        # 17 x 17 x 768
        x = self.Mixed_6c(x)
        # 17 x 17 x 768
        x = self.Mixed_6d(x)
        # 17 x 17 x 768
        x = self.Mixed_6e(x)
        # 17 x 17 x 768

        # if self.training and self.aux_logits:
        #     aux = self.AuxLogits(x)

        # 17 x 17 x 768
        x = self.Mixed_7a(x)
        # 8 x 8 x 1280
        x = self.Mixed_7b(x)
        # 8 x 8 x 2048
        x = self.Mixed_7c(x)
        # 8 x 8 x 2048

        #x = F.avg_pool2d(x, kernel_size=8)
        x = F.adaptive_avg_pool2d(x, output_size=1)

        # 1 x 1 x 2048
        #x = F.dropout(x, training=self.training)
        # 1 x 1 x 2048
        x = x.view(x.size(0), -1)
        # 2048
        x = self.fc(x)
        # 1000 (num_classes)

        # if self.training and self.aux_logits:
        #     return x, aux

        return x


** dataset setting **
	train_dataset.split = train_id_v0_7019896
	valid_dataset.split = valid_id_v0_5000
	len(train_dataset)  = 12283645
	len(valid_dataset)  = 8785
	len(train_loader)   = 95965
	len(valid_loadernum_iters)   = 69
	batch_size  = 128
	iter_accum  = 4
	batch_size*iter_accum  = 512

def train_augment(image):

    if random.random() < 0.5:
        image = random_shift_scale_rotate(image,
                #shift_limit  = [0, 0],
                shift_limit  = [-0.06,  0.06],
                scale_limit  = [0.9, 1.2],
                rotate_limit = [-10,10],
                aspect_limit = [1,1],
                #size=[1,299],
        borderMode=cv2.BORDER_REFLECT_101 , u=1)
    else:
        pass

    # flip  random ---------
    image = random_horizontal_flip(image, u=0.5)

    tensor = image_to_tensor_transform(image)
    return tensor

def valid_augment(image):

    tensor = image_to_tensor_transform(image)
    return tensor


** start training here! **
 optimizer=<torch.optim.sgd.SGD object at 0x7f4ac308b160>
 LR=Step Learning Rates
rates=[' 0.0001']
steps=['      0']

   rate   iter   epoch  | valid_loss/acc | train_loss/acc | batch_loss/acc |  time   
-------------------------------------------------------------------------------------
0.0000   39.0 k   1.63  | 1.4759  0.6820 | 0.0000  0.0000 | 0.0000  0.0000 |     0 min 
0.0001   40.0 k   1.67  | 1.4783  0.6809 | 1.1220  0.6932 | 1.3729  0.6484 |    24 min 
0.0001   41.0 k   1.71  | 1.4755  0.6813 | 1.1443  0.6984 | 0.9434  0.6875 |    48 min 
0.0001   42.0 k   1.75  | 1.4772  0.6818 | 1.1348  0.6971 | 1.1469  0.6953 |    72 min 
0.0001   43.0 k   1.79  | 1.4768  0.6816 | 1.1149  0.6982 | 0.7922  0.7734 |    96 min 
0.0001   44.0 k   1.83  | 1.4762  0.6812 | 1.1306  0.6979 | 1.0233  0.7266 |   120 min 
0.0001   45.0 k   1.88  | 1.4770  0.6826 | 1.1110  0.6977 | 1.1979  0.7344 |   144 min 
0.0001   46.0 k   1.92  | 1.4780  0.6814 | 1.1364  0.6926 | 1.3297  0.6562 |   167 min 
0.0001   47.0 k   1.96  | 1.4767  0.6818 | 1.1408  0.7012 | 1.2433  0.6875 |   190 min 
0.0001   48.0 k   2.00  | 1.4760  0.6801 | 1.1325  0.6961 | 1.3342  0.6641 |   213 min 
0.0001   49.0 k   2.04  | 1.4762  0.6820 | 1.1195  0.7033 | 1.0021  0.7109 |   236 min 
0.0001   50.0 k   2.08  | 1.4761  0.6830 | 1.1625  0.6952 | 1.4745  0.6562 |   259 min 
0.0001   51.0 k   2.13  | 1.4786  0.6824 | 1.1161  0.7017 | 1.2101  0.7188 |   282 min 
